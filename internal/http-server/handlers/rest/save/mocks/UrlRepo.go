// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// UrlRepo is an autogenerated mock type for the UrlRepo type
type UrlRepo struct {
	mock.Mock
}

// GetUrl provides a mock function with given fields: ctx, alias
func (_m *UrlRepo) GetUrl(ctx context.Context, alias string) (string, error) {
	ret := _m.Called(ctx, alias)

	if len(ret) == 0 {
		panic("no return value specified for GetUrl")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, alias)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, alias)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, alias)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveUrl provides a mock function with given fields: ctx, alias, url, validUntil
func (_m *UrlRepo) SaveUrl(ctx context.Context, alias string, url string, validUntil time.Time) (int64, error) {
	ret := _m.Called(ctx, alias, url, validUntil)

	if len(ret) == 0 {
		panic("no return value specified for SaveUrl")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time) (int64, error)); ok {
		return rf(ctx, alias, url, validUntil)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time) int64); ok {
		r0 = rf(ctx, alias, url, validUntil)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, time.Time) error); ok {
		r1 = rf(ctx, alias, url, validUntil)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUrlRepo creates a new instance of UrlRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUrlRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UrlRepo {
	mock := &UrlRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
